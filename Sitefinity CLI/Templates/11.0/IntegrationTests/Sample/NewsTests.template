/* {{> sign}} */

using MbUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading;
using Telerik.Sitefinity.Modules.News;
using Telerik.Sitefinity.News.Model;
using Telerik.Sitefinity.Workflow;

namespace {{pascalCaseName}}.News
{
    /// <summary>
    /// Represents a class with sample tests for the news module
    /// </summary>
    [TestFixture]
    [Description("Tests news items basic CRUD operations")]
    [Author(TestAuthors.SitefinityCLI)]
    public class NewsTests
    {
        /// <summary>
        /// This method is called before any tests in this fixture have run
        /// </summary>
        public void FixtureSetUp()
        {
            this.newsItemIds = new List<Guid>();
        }

		/// <summary>
		/// This method is called after all tests in this fixture have run.
		/// </summary>
        [FixtureTearDown]
        public void FixtureTearDown()
        {
			this.manager = NewsManager.GetManager();

            this.DeleteAllNews();
        }

		/// <summary>
		/// Tests the creation of news items.
		/// </summary>
        [Test]
        [Category(TestCategories.News)]
        [Description("Tests creating news item")]
        [Author(TestAuthors.SitefinityCLI)]
        public void CreateNewsItem()
        {
			this.manager = NewsManager.GetManager();

            this.CreateNews("test-news-1");
            NewsItem news = this.manager.GetNewsItems().Where(n => n.Title == "test-news-1").FirstOrDefault();
            Assert.IsNotNull(news);
        }

		/// <summary>
		/// Tests the publishing of news items.
		/// </summary>
        [Test]
        [Category(TestCategories.News)]
        [Description("Tests publishing news item")]
        [Author(TestAuthors.SitefinityCLI)]
        public void PublishNewsItem()
        {
			this.manager = NewsManager.GetManager();

            Guid newsId = this.CreateNews("test-news-2");
            this.PublishNews(newsId);

            NewsItem newsItem = this.manager.GetNewsItem(newsId);
            Assert.AreEqual("Published", newsItem.ApprovalWorkflowState.ToString());
        }

		/// <summary>
		/// Tests the deletion of news items.
		/// </summary>
        [Test]
        [Category(TestCategories.News)]
        [Description("Tests deleting news item")]
        [Author(TestAuthors.SitefinityCLI)]
        public void DeleteNewsItem()
        {
			this.manager = NewsManager.GetManager();

            Guid newsId = this.CreateNews("test-news-3");
            this.DeleteNews(newsId);

            NewsItem news = this.manager.GetNewsItems().Where(n => n.Title == "test-news-3").FirstOrDefault();
            Assert.IsNull(news);
        }

		/// <summary>
		/// Helper method that creates news item.
		/// </summary>
        private Guid CreateNews(string title)
        {
            NewsItem newsItem = this.manager.CreateNewsItem();

            newsItem.Title = title;
            newsItem.UrlName = Regex.Replace(title.ToLower(), @"[^\w\-\!\$\'\(\)\=\@\d_]+", "-"); ;

            this.manager.SaveChanges();

            return newsItem.Id;
        }

		/// <summary>
		/// Helper method that publishes news item.
		/// </summary>
        private void PublishNews(Guid newsId)
        {
            Dictionary<string, string> bag = new Dictionary<string, string>
            {
                { "ContentType", typeof(NewsItem).FullName }
            };
            var currentCulture = Thread.CurrentThread.CurrentUICulture;
            bag.Add("Language", currentCulture.Name);
            WorkflowManager.MessageWorkflow(newsId, typeof(NewsItem), null, "Publish", false, bag);
        }

		/// <summary>
		/// Helper method that deletes news item.
		/// </summary>
        private void DeleteNews(Guid newsId)
        {
            NewsItem newsItem = this.manager.GetNewsItem(newsId);

            if (newsItem != null)
            {
                this.manager.Delete(newsItem);
                this.manager.SaveChanges();
            }
        }

		/// <summary>
		/// Helper method that creates news item.
		/// </summary>
        private void DeleteAllNews()
        {
            IQueryable<NewsItem> news = manager.GetNewsItems();

            foreach (var id in newsItemIds)
            {
                var item = news.FirstOrDefault(x => x.Id == id);

                if (item != null)
                {
                    manager.Delete(item);
                }
            }

            manager.SaveChanges();
        }

        private NewsManager manager;

        private ICollection<Guid> newsItemIds;
    }
}
