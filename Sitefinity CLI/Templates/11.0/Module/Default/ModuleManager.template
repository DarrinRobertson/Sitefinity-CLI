/* {{> sign}} */

using Telerik.Sitefinity.Configuration;
using Telerik.Sitefinity.Data;

namespace {{pascalCaseName}}
{
    /// <summary>
    /// Provides API for managing module definitions and working with corresponding data types
    /// </summary>
    public class {{pascalCaseName}}ModuleManager : ManagerBase<{{pascalCaseName}}ModuleDataProvider>
    {
        /// <summary>
        /// Initializes a new instance of <see cref="{{pascalCaseName}}ModuleManager"/> class with the default provider.
        /// </summary>
        public {{pascalCaseName}}ModuleManager()
            : this(null)
        {
        }

        /// <summary>
        /// Initializes a new instance of <see cref="{{pascalCaseName}}ModuleManager"/> class and sets the specified provider.
        /// </summary>
        /// <param name="providerName">
        /// The name of the provider. If empty string or null the default provider is set.
        /// </param>
        public {{pascalCaseName}}ModuleManager(string providerName)
            : base(providerName)
        {
        }

        /// <summary>
        /// Initializes a new instance of <see cref="{{pascalCaseName}}ModuleManager"/> class and sets the specified provider and distributed transaction.
        /// </summary>
        /// <param name="providerName">
        /// The name of the provider. If empty string or null the default provider is set.
        /// </param>
        /// <param name="transactionName">
        /// The name of a distributed transaction. If empty string or null this manager will use separate transaction.
        /// </param>
        public {{pascalCaseName}}ModuleManager(string providerName, string transactionName)
            : base(providerName, transactionName)
        {
        }

        /// <summary>
        /// Gets the default provider for this manager.
        /// </summary>
        /// <value></value>
        protected override GetDefaultProvider DefaultProviderDelegate
        {
            get { return () => Config.Get<{{pascalCaseName}}ModuleConfig>().DefaultProvider; }
        }

        /// <summary>
        /// The name of the module that this manager belongs to.
        /// </summary>
        /// <value></value>
        public override string ModuleName
        {
            get { return {{pascalCaseName}}Module.moduleName; }
        }

        /// <summary>
        /// Gets a value representing the collection of data provider settings.
        /// </summary>
        /// <value></value>
        protected override ConfigElementDictionary<string, DataProviderSettings> ProvidersSettings
        {
            get { return Config.Get<{{pascalCaseName}}ModuleConfig>().Providers; }
        }

        /// <summary>
        /// Gets a manger instance for the default data provider.
        /// </summary>
        /// <returns>The manager instance.</returns>
        public static {{pascalCaseName}}ModuleManager GetManager()
        {
            return ManagerBase<{{pascalCaseName}}ModuleDataProvider>.GetManager<{{pascalCaseName}}ModuleManager>();
        }

        /// <summary>
        /// Gets a manger instance for the specified data provider.
        /// </summary>
        /// <param name="providerName">The name of the data provider.</param>
        /// <returns>The manager instance.</returns>
        public static {{pascalCaseName}}ModuleManager GetManager(string providerName)
        {
            return ManagerBase<{{pascalCaseName}}ModuleDataProvider>.GetManager<{{pascalCaseName}}ModuleManager>(providerName);
        }

        /// <summary>
        /// Gets a manger instance for the specified data provider.
        /// </summary>
        /// <typeparam name="T">The type of the manager.</typeparam>
        /// <param name="providerName">The name of the data provider.</param>
        /// <param name="transactionName">Name of a named global transaction.</param>
        /// <returns>The manager instance.</returns>
        public static {{pascalCaseName}}ModuleManager GetManager(string providerName, string transactionName)
        {
            return ManagerBase<{{pascalCaseName}}ModuleDataProvider>.GetManager<{{pascalCaseName}}ModuleManager>(providerName, transactionName);
        }
    }
}