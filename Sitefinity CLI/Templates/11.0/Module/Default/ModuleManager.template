/* {{> sign}} */

using Telerik.Sitefinity.Configuration;
using Telerik.Sitefinity.Data;

namespace {{pascalCaseName}}
{
    public class {{pascalCaseName}}ModuleManager : ManagerBase<{{pascalCaseName}}ModuleDataProvider>
    {
        public {{pascalCaseName}}ModuleManager()
            : this(null)
        {
        }

        public {{pascalCaseName}}ModuleManager(string providerName)
            : base(providerName)
        {
        }

        public {{pascalCaseName}}ModuleManager(string providerName, string transactionName)
            : base(providerName, transactionName)
        {
        }

        protected override GetDefaultProvider DefaultProviderDelegate
        {
            get { return () => Config.Get<{{pascalCaseName}}ModuleConfig>().DefaultProvider; }
        }

        public override string ModuleName
        {
            get { return {{pascalCaseName}}Module.moduleName; }
        }

        protected override ConfigElementDictionary<string, DataProviderSettings> ProvidersSettings
        {
            get { return Config.Get<{{pascalCaseName}}ModuleConfig>().Providers; }
        }

        public static {{pascalCaseName}}ModuleManager GetManager()
        {
            return ManagerBase<{{pascalCaseName}}ModuleDataProvider>.GetManager<{{pascalCaseName}}ModuleManager>();
        }

        public static {{pascalCaseName}}ModuleManager GetManager(string providerName, string transactionName)
        {
            return ManagerBase<{{pascalCaseName}}ModuleDataProvider>.GetManager<{{pascalCaseName}}ModuleManager>(providerName, transactionName);
        }

        public static {{pascalCaseName}}ModuleManager GetManager(string providerName)
        {
            return ManagerBase<{{pascalCaseName}}ModuleDataProvider>.GetManager<{{pascalCaseName}}ModuleManager>(providerName);
        }
    }
}