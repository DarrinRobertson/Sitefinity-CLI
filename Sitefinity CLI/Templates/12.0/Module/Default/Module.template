/* {{> sign}} */

using System;
using System.Text.RegularExpressions;
using Telerik.Sitefinity;
using Telerik.Sitefinity.Abstractions;
using Telerik.Sitefinity.Configuration;
using Telerik.Sitefinity.Fluent.Modules;
using Telerik.Sitefinity.Services;

using {{pascalCaseName}};

[assembly: SitefinityModule("{{pascalCaseName}}", 
							typeof({{pascalCaseName}}Module), 
							"{{name}}", 
							"{{description}}", 
							StartupType.OnApplicationStart)]

namespace {{pascalCaseName}}
{
    /// <summary>
    /// Represents custom module. 
    /// For more information on custom modules see our documentation: https://www.progress.com/documentation/sitefinity-cms/overview-custom-modules
    /// For sample custom module project see this project in the Sitefinity GitHub repo: https://github.com/Sitefinity/Telerik.Sitefinity.Samples.Sitemap
    /// For custom module with page the following has to be done:
    /// - Uncomment the commented code in public method Install(SiteInitializer initializer);
    /// - Generate a Guid in private read only property GroupPageId in this class;
    /// - Generate a Guid in private read only property HomePageId in this class;
    /// - Generate a Guid in public readonly property LandingPageId in this class;
    /// </summary>
    public class {{pascalCaseName}}Module : ModuleBase
    {
        /// <summary>
        /// Gets the landing page id for the module.
        /// </summary>
        /// <value>The landing page id.</value>
        public override Guid LandingPageId
        {
            get
            {
                //// For custom module with page uncomment the following line and generate a new Guid between the double quotes below. Example: return new Guid("C1A050DC-4D02-45FA-9205-41D69E71C489");
                // return new Guid("");
                return Guid.Empty;
            }
        }

        /// <summary>
        /// Gets the group page id for the module
        /// </summary>
        private Guid GroupPageId
        {
            get
            {
                //// For custom module with page uncomment the following line and generate a new Guid between the double quotes below. Example: return new Guid("C1A050DC-4D02-45FA-9205-41D69E71C489");
                // return new Guid("");
                throw new NotImplementedException();
            }
        }

        private Guid HomePageId
        {
            get
            {
                //// For custom module with page uncomment the following line and generate a new Guid between the double quotes below. Example: return new Guid("C1A050DC-4D02-45FA-9205-41D69E71C489");
                // return new Guid("");
                throw new NotImplementedException();
            }
        }

        /// <summary>
        /// Installs the module.
        /// </summary>
        /// <param name="initializer">The initializer. A helper class for installing Sitefinity modules.</param>
        public override void Install(SiteInitializer initializer)
        {
            //// For custom module with page uncomment the following lines
            //var urlName = Regex.Replace("{{name}}", @"[\s\-\!\$\(\)\=\@\d_\']+", "-", RegexOptions.IgnoreCase).ToLower();
            //initializer.Installer
            //    .CreateModuleGroupPage(this.GroupPageId, "{{pascalCaseName}}")
            //    .PlaceUnder(Telerik.Sitefinity.Fluent.Modules.CommonNode.Pages)
            //    .SetTitle("{{name}}")
            //    .SetUrlName(urlName)
            //    .SetDescription("{{description}}")
            //    .AddChildPage(this.HomePageId, "{{pascalCaseName}}")
            //        .SetTitle("{{name}} Home")
            //        .SetDescription("{{description}} Home Page")
            //        .SetUrlName($"{urlName}-home")
            //        .Done()
            //    .Done();
        }

        /// <summary>
        /// Initializes the service with specified settings.
        /// </summary>
        /// <param name="settings">The settings.</param>
        public override void Initialize(ModuleSettings settings)
        {
            base.Initialize(settings);

            App.WorkWith().Module(Name)
                .Initialize()
                    .Configuration<{{pascalCaseName}}Config>();
        }

        /// <summary>
        /// Gets the module config.
        /// </summary>
        /// <returns></returns>
        protected override ConfigSection GetModuleConfig()
        {
            return Config.Get<{{pascalCaseName}}Config>();
        }

        /// <summary>
        /// Gets the CLR types of all data managers provided by this module.
        /// </summary>
        /// <value>An array of <see cref="Type"/> objects.</value>
        public override Type[] Managers
        {
            get { return new Type[0]; }
        }
    }
}