/* {{> sign}} */

using SitefinityWebApp.Modules.{{name}};
using System;
using System.Text.RegularExpressions;
using Telerik.Sitefinity;
using Telerik.Sitefinity.Abstractions;
using Telerik.Sitefinity.Configuration;
using Telerik.Sitefinity.Fluent.Modules;
using Telerik.Sitefinity.Services;

// [assembly: SitefinityModule({{name}}Module.moduleName, typeof({{name}}Module), "{{name}}", "{{description}}", StartupType.OnApplicationStart)]
namespace SitefinityWebApp.Modules.{{name}}
{
    public class {{name}}Module : ModuleBase
    {
        public override Guid LandingPageId
        {
            get { return homePageId; }
        }

        public override void Initialize(ModuleSettings settings)
        {
            base.Initialize(settings);

            App.WorkWith().Module(Name)
                .Initialize()
                    .Configuration<{{name}}ModuleConfig>()
                    .Localization<{{name}}ModuleResources>();
        }

        public override void Install(SiteInitializer initializer)
        {
			var urlName = Regex.Replace("{{name}}", @"[^\-\!\$\(\)\=\@\d_\']+", "-", RegexOptions.IgnoreCase).ToLower();
            initializer.Installer
                .CreateModuleGroupPage(groupPageId, "{{name}}")
                    .PlaceUnder(CommonNode.TypesOfContent)
                    .LocalizeUsing<{{name}}ModuleResources>()
                    .SetTitleLocalized("PageGroupNodeTitle")
                    .SetUrlName(urlName)
                    .SetDescriptionLocalized("PageGroupNodeDescription")
                    .AddChildPage({{name}}Module.homePageId, "{{name}} Home")
                        .LocalizeUsing<{{name}}ModuleResources>()
                        .SetTitleLocalized("{{name}}Title")
                        .SetHtmlTitleLocalized("{{name}}Title")
                        .SetUrlName("{{urlName}}-home")
                        .SetDescriptionLocalized("{{description}}")
                        .AddContentView({{name}}ModuleDefinition.BackendDefinitionName, "{{name}}BackendView")
                        .Done()
                    .Done()
            .PageToolbox()
                .ContentSection()
                    .LoadOrAddWidget<{{name}}ModuleView>("{{name}} View")
                        .SetTitle("{{name}} View")
                        .SetDescription("{{description}} View")
                        .LocalizeUsing<{{name}}ModuleResources>()
                        .SetCssClass("sf{{name}}ViewIcn")
                        .Done()
                    .Done()
                .Done()
            .AddWorkflowType<{{name}}ModuleItem>()
                .SetTitle("{{name}}Title")
                .SetServiceUrl("~/Workflows/{{name}}Workflow.xamlx")
                .LocalizeUsing<{{name}}ModuleResources>()
                .Done();

        }

        public override void Upgrade(SiteInitializer initializer, Version upgradeFrom)
        {
        }

        protected override ConfigSection GetModuleConfig()
        {
            return Config.Get<{{name}}ModuleConfig>();
        }

        public override Type[] Managers
        {
            get { return new Type[] { typeof({{name}}ModuleManager) }; }
        }

        internal static Guid groupPageId = new Guid("AB45CA65-B763-4C8A-84F1-442F701D3971");
        internal static Guid homePageId = new Guid("AB45CA65-B763-4C8A-84F1-442F701D3972");
        internal const string moduleName = "{{name}}";
    }
}