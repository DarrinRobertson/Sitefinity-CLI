/* {{> sign}} */

using System;
using System.Text.RegularExpressions;
using Telerik.Sitefinity;
using Telerik.Sitefinity.Abstractions;
using Telerik.Sitefinity.Configuration;
using Telerik.Sitefinity.Fluent.Modules;
using Telerik.Sitefinity.Services;

namespace {{pascalCaseName}}
{
    /// <summary>
    /// Represents generic content module.
    /// </summary>
    public class {{pascalCaseName}}Module : ModuleBase
    {
        /// <summary>
        /// Gets the landing page id for the module.
        /// </summary>
        /// <value>The landing page id.</value>
        public override Guid LandingPageId
        {
            get { return homePageId; }
        }

        /// <summary>
        /// Initializes the service with specified settings.
        /// </summary>
        /// <param name="settings">The settings.</param>
        public override void Initialize(ModuleSettings settings)
        {
            base.Initialize(settings);

            App.WorkWith().Module(Name)
                .Initialize()
                    .Configuration<{{pascalCaseName}}ModuleConfig>()
                    .Localization<{{pascalCaseName}}ModuleResources>();
        }

        /// <summary>
        /// Installs the pages.
        /// </summary>
        /// <param name="initializer">The initializer.</param>
        public override void Install(SiteInitializer initializer)
        {
			var urlName = Regex.Replace(moduleName, @"[\-\!\$\(\)\=\@\d_\']+", "-", RegexOptions.IgnoreCase).ToLower();
            initializer.Installer
                .CreateModuleGroupPage(groupPageId, moduleName)
                    .PlaceUnder(CommonNode.TypesOfContent)
                    .LocalizeUsing<{{pascalCaseName}}ModuleResources>()
                    .SetTitleLocalized("PageGroupNodeTitle")
                    .SetUrlName(urlName)
                    .SetDescriptionLocalized("PageGroupNodeDescription")
                    .AddChildPage({{pascalCaseName}}Module.homePageId, "Home")
                        .LocalizeUsing<{{pascalCaseName}}ModuleResources>()
                        .SetTitleLocalized("ModuleTitle")
                        .SetHtmlTitleLocalized("ModuleTitle")
                        .SetUrlName(urlName + "-home")
                        .SetDescriptionLocalized("ModuleDescription")
                        .AddContentView({{pascalCaseName}}ModuleDefinition.BackendDefinitionName, "{{pascalCaseName}}BackendView")
                        .Done()
                    .Done()
            .PageToolbox()
                .ContentSection()
                    .LoadOrAddWidget<{{pascalCaseName}}ModuleView>("ModuleViewTitle")
                        .LocalizeUsing<{{pascalCaseName}}ModuleResources>()
                        .SetTitle("ModuleViewTitle")
                        .SetDescription("ModuleViewDescription")
                        .SetCssClass("sf{{pascalCaseName}}ViewIcn")
                        .Done()
                    .Done()
                .Done()
            .AddWorkflowType<{{pascalCaseName}}ModuleItem>()
                .SetTitle(moduleName)
                .SetServiceUrl("~/Workflows/{{pascalCaseName}}Workflow.xamlx")
                .LocalizeUsing<{{pascalCaseName}}ModuleResources>()
                .Done();

        }

        /// <summary>
        /// Upgrades this module from the specified version.
        /// </summary>
        /// <param name="initializer">The Site Initializer. A helper class for installing Sitefinity modules.</param>
        /// <param name="upgradeFrom">The version this module us upgrading from.</param>
        public override void Upgrade(SiteInitializer initializer, Version upgradeFrom)
        {
        }

        /// <summary>
        /// Gets the module config.
        /// </summary>
        /// <returns></returns>
        protected override ConfigSection GetModuleConfig()
        {
            return Config.Get<{{pascalCaseName}}ModuleConfig>();
        }

        /// <summary>
        /// Gets the CLR types of all data managers provided by this module.
        /// </summary>
        /// <value>An array of <see cref="Type"/> objects.</value>
        public override Type[] Managers
        {
            get { return new Type[] { typeof({{pascalCaseName}}ModuleManager) }; }
        }

        internal static Guid groupPageId = new Guid("AB45CA65-B763-4C8A-84F1-442F701D3971");
        internal static Guid homePageId = new Guid("AB45CA65-B763-4C8A-84F1-442F701D3972");
        internal const string moduleName = "{{name}}";
    }
}